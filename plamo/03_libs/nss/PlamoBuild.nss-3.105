#!/bin/sh
##############################################################
pkgbase='nss'
vers="3.105"
url="https://ftp.mozilla.org/pub/security/${pkgbase}/releases/NSS_${vers//./_}_RTM/src/${pkgbase}-${vers}.tar.gz"
verify=""
digest="sha1sums:e1d60c0097b89fc94d6e490127ad36452880968e"
arch=`uname -m`
build=B1
src="${pkgbase}-${vers}"
OPT_CONFIG='--disable-static --enable-shared'
DOCS=''
#patch_vers="3.103"
blfs_patch_url="http://www.linuxfromscratch.org/patches/blfs/svn/nss-standalone-1.patch"
patchfiles="${blfs_patch_url##*/}"
compress=tzst
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build{,32})
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)


if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  download_sources
  if [ ! -f ${blfs_patch_url##*/} ]; then
    wget $blfs_patch_url
  fi
fi

if [ $opt_config -eq 1 ] ; then
  if [ -d $B ] ; then rm -rf $B ; fi ; cp -a $S $B
######################################################################
#  copy sources into build directory, patch and make in the build dir
######################################################################
  cd $B
  for patch in $patchfiles ; do
    patch -p1 < $W/$patch
  done
fi
    
if [ $opt_build -eq 1 ] ; then
  cd $B/nss
  export LDFLAGS='-Wl,--as-needed'
  make -j1 \
       BUILD_OPT=1 \
       NSPR_INCLUDE_DIR=/usr/include/nspr \
       USE_SYSTEM_ZLIB=1 \
       ZLIB_LIBS=-lz \
       NSS_ENABLE_WERROR=0 \
       $([ $(uname -m) = x86_64 ] && echo USE_64=1) \
       $([ -f /usr/include/sqlite3.h ] && echo NSS_USE_SYSTEM_SQLITE=1)

  if [ $? != 0 ]; then
    echo "build error. $0 script stop"
    exit 255
  fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B/dist

  # libs
  install -v -m755 -d $P/usr/${libdir}
  install -v -m755 Linux*/lib/*.so $P/usr/${libdir}/
  install -v -m644 Linux*/lib/{*.chk,libcrmf.a} $P/usr/${libdir}/

  # includes
  install -v -m755 -d $P/usr/include/nss
  cp -v -RL {public,private}/nss/* $P/usr/include/nss
  chmod -v 644 $P/usr/include/nss/*

  # binaries
  install -v -m755 -d $P/usr/bin
  for file in certutil cmsutil crlutil modutil pk12util shlibsign signtool signver ssltap nss-config; do
    install -v -m755 Linux*/bin/${file} $P/usr/bin
  done

  # pkgconfig
  install -v -m755 -d $P/usr/${libdir}/pkgconfig
  install -v -m644 Linux*/lib/pkgconfig/nss.pc $P/usr/${libdir}/pkgconfig

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man, 
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and 
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
